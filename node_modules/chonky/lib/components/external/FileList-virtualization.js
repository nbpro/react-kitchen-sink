"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFileListRenderer = void 0;
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importStar(require("react"));
var react_window_1 = require("react-window");
var recoil_1 = require("recoil");
var files_recoil_1 = require("../../recoil/files.recoil");
var icons_types_1 = require("../../types/icons.types");
var validation_1 = require("../../util/validation");
var SmartFileEntry_1 = require("../file-entry/SmartFileEntry");
var ChonkyIcon_1 = require("./ChonkyIcon");
var NoContentNotification = function (props) {
    var width = props.width, height = props.height;
    var className = classnames_1.default({
        'chonky-file-list-notification': true,
        'chonky-file-list-notification-empty': true,
    });
    var style = {
        width: width,
        height: height,
    };
    return (react_1.default.createElement("div", { className: className, style: style },
        react_1.default.createElement("div", { className: "chonky-file-list-notification-content" },
            react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, { icon: icons_types_1.ChonkyIconName.folderOpen }),
            "\u00A0 Nothing to show")));
};
var fileListItemRenderer = function (index, file, isGridView, style, gutter) {
    if (gutter === void 0) { gutter = 0; }
    if (file === undefined)
        return null;
    var styleWithGutter = style;
    if (gutter) {
        styleWithGutter = __assign(__assign({}, style), { top: style.top + gutter, left: style.left + gutter, width: style.width - gutter, height: style.height - gutter });
    }
    return (react_1.default.createElement("div", { style: styleWithGutter },
        react_1.default.createElement(SmartFileEntry_1.SmartFileEntry, { fileId: file ? file.id : null, displayIndex: index, isGridView: isGridView })));
};
exports.useFileListRenderer = function (viewConfig) {
    var files = recoil_1.useRecoilValue(files_recoil_1.filesState);
    return react_1.useCallback(function (_a) {
        var width = _a.width, height = _a.height;
        var fileCount = files.length;
        var getItemKey = function (index) { var _a, _b; return (_b = (_a = files[index]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "loading-file-" + index; };
        if (fileCount === 0) {
            return (react_1.default.createElement(NoContentNotification, { width: width, height: viewConfig.entryHeight }));
        }
        if (viewConfig.entryWidth) {
            // When entry size is specified, we use Grid view
            var isMobile = validation_1.isMobileDevice();
            var gutter_1 = isMobile ? 5 : 8;
            var scrollbar = isMobile ? 0 : 16;
            var columnWidth = isMobile ? 0 : viewConfig.entryWidth + gutter_1;
            var columnCount_1 = isMobile
                ? 2
                : Math.max(1, Math.floor((width - scrollbar) / columnWidth));
            var rowCount = Math.ceil(fileCount / columnCount_1);
            var cellRenderer = function (data) {
                var index = data.rowIndex * columnCount_1 + data.columnIndex;
                return fileListItemRenderer(index, files[index], true, data.style, gutter_1);
            };
            return (react_1.default.createElement(react_window_1.FixedSizeGrid, { className: "chonky-file-list-grid-view", style: {
                    marginTop: -gutter_1,
                    marginLeft: -gutter_1,
                    marginRight: -gutter_1,
                    marginBottom: -gutter_1,
                }, columnWidth: viewConfig.entryWidth + gutter_1, rowHeight: viewConfig.entryHeight + gutter_1, columnCount: columnCount_1, height: height, rowCount: rowCount, width: width, itemKey: function (data) {
                    return getItemKey(data.rowIndex * columnCount_1 + data.columnIndex);
                } }, cellRenderer));
        }
        else {
            // When entry size is null, we use List view
            var rowRenderer = function (data) {
                return fileListItemRenderer(data.index, files[data.index], false, data.style);
            };
            return (react_1.default.createElement(react_window_1.FixedSizeList, { className: "chonky-file-list-list-view", itemSize: viewConfig.entryHeight, height: height, itemCount: fileCount, width: width, itemKey: function (index) { return getItemKey(index); } }, rowRenderer));
        }
    }, [viewConfig, files]);
};
