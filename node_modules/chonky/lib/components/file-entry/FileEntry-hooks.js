"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useThumbnailUrl = exports.useCommonFileEntryComponents = exports.useFileNameComponent = exports.useModifierIconComponents = exports.useDndIcon = void 0;
var classnames_1 = __importDefault(require("classnames"));
// eslint-disable-next-line import/order
var path_1 = __importDefault(require("path"));
var react_1 = __importStar(require("react"));
var recoil_1 = require("recoil");
var thumbnails_recoil_1 = require("../../recoil/thumbnails.recoil");
var icons_types_1 = require("../../types/icons.types");
var file_helper_1 = require("../../util/file-helper");
var file_icon_helper_1 = require("../../util/file-icon-helper");
var logger_1 = require("../../util/logger");
var ChonkyIcon_1 = require("../external/ChonkyIcon");
var TextPlaceholder_1 = require("../external/TextPlaceholder");
exports.useDndIcon = function (props) {
    var dndIconName = null;
    var dndIconColor = undefined;
    if (props.dndIsOver) {
        var showDropIcon = props.dndCanDrop && !props.selected;
        dndIconName = showDropIcon
            ? icons_types_1.ChonkyIconName.dndCanDrop
            : icons_types_1.ChonkyIconName.dndCannotDrop;
        dndIconColor = showDropIcon ? 'green' : 'red';
    }
    else if (props.dndIsDragging) {
        dndIconName = icons_types_1.ChonkyIconName.dndDragging;
    }
    return { dndIconName: dndIconName, dndIconColor: dndIconColor };
};
exports.useModifierIconComponents = function (file) {
    var modifierIcons = react_1.useMemo(function () {
        var modifierIcons = [];
        if (file_helper_1.FileHelper.isHidden(file))
            modifierIcons.push(icons_types_1.ChonkyIconName.hidden);
        if (file_helper_1.FileHelper.isSymlink(file))
            modifierIcons.push(icons_types_1.ChonkyIconName.symlink);
        if (file_helper_1.FileHelper.isEncrypted(file))
            modifierIcons.push(icons_types_1.ChonkyIconName.lock);
        return modifierIcons;
    }, [file]);
    var modifierIconComponents = react_1.useMemo(function () {
        return modifierIcons.map(function (icon, index) { return (react_1.default.createElement(ChonkyIcon_1.ChonkyIconFA, { key: "file-modifier-" + index, icon: icon })); });
    }, [modifierIcons]);
    return modifierIconComponents;
};
exports.useFileNameComponent = function (file) {
    return react_1.useMemo(function () {
        var _a;
        if (!file)
            return react_1.default.createElement(TextPlaceholder_1.TextPlaceholder, { minLength: 15, maxLength: 20 });
        var name;
        var extension;
        var isDir = file_helper_1.FileHelper.isDirectory(file);
        if (isDir) {
            name = file.name;
            extension = '/';
        }
        else {
            extension = (_a = file.ext) !== null && _a !== void 0 ? _a : path_1.default.extname(file.name);
            name = file.name.substr(0, file.name.length - extension.length);
        }
        return (react_1.default.createElement(react_1.default.Fragment, null,
            name,
            react_1.default.createElement("span", { className: "chonky-file-entry-description-title-extension" }, extension)));
    }, [file]);
};
exports.useCommonFileEntryComponents = function (props, isGridView, useDarkColor, thumbnailLoading, thumbnailUrl) {
    // Determine file entry class
    var entryClassName = classnames_1.default({
        'chonky-file-entry': true,
        'chonky-file-entry-grid': isGridView,
        'chonky-file-entry-list': !isGridView,
        'chonky-file-entry-directory': file_helper_1.FileHelper.isDirectory(props.file),
        'chonky-file-entry-selected': props.selected,
        'chonky-file-entry-focused': props.focused,
        'chonky-file-entry-dragging': props.dndIsDragging,
        'chonky-file-entry-drop-hovered': props.dndIsOver && props.dndCanDrop,
        'chonky-file-entry-has-thumbnail': !!thumbnailUrl,
    });
    // Determine file color and icon properties
    var iconData = file_icon_helper_1.useIconData(props.file);
    var fileColor = useDarkColor
        ? file_icon_helper_1.ColorsDark[iconData.colorCode]
        : file_icon_helper_1.ColorsLight[iconData.colorCode];
    var iconSpin = thumbnailLoading || !props.file;
    var icon = thumbnailLoading ? icons_types_1.ChonkyIconName.loading : iconData.icon;
    return __assign(__assign({ entryClassName: entryClassName }, exports.useDndIcon(props)), { fileColor: fileColor,
        iconSpin: iconSpin,
        icon: icon, fileDateString: file_helper_1.FileHelper.getReadableDate(props.file), fileSizeString: file_helper_1.FileHelper.getReadableFileSize(props.file), modifierIconComponents: exports.useModifierIconComponents(props.file), fileNameComponent: exports.useFileNameComponent(props.file) });
};
exports.useThumbnailUrl = function (file) {
    var thumbnailGenerator = recoil_1.useRecoilValue(thumbnails_recoil_1.thumbnailGeneratorState);
    var _a = react_1.useState(null), thumbnailUrl = _a[0], setThumbnailUrl = _a[1];
    var _b = react_1.useState(false), thumbnailLoading = _b[0], setThumbnailLoading = _b[1];
    react_1.useEffect(function () {
        var loadingCancelled = false;
        if (file) {
            if (thumbnailGenerator) {
                setThumbnailLoading(true);
                Promise.resolve()
                    .then(function () { return thumbnailGenerator(file); })
                    .then(function (thumbnailUrl) {
                    if (loadingCancelled)
                        return;
                    setThumbnailLoading(false);
                    if (thumbnailUrl && typeof thumbnailUrl === 'string') {
                        setThumbnailUrl(thumbnailUrl);
                    }
                })
                    .catch(function (error) {
                    if (!loadingCancelled)
                        setThumbnailLoading(false);
                    logger_1.Logger.error("User-defined \"thumbnailGenerator\" handler threw an error: " + error.message);
                });
            }
            else if (file.thumbnailUrl) {
                setThumbnailUrl(file.thumbnailUrl);
            }
        }
        return function () {
            loadingCancelled = true;
        };
    }, [file, setThumbnailUrl, setThumbnailLoading, thumbnailGenerator]);
    return { thumbnailUrl: thumbnailUrl, thumbnailLoading: thumbnailLoading };
};
